const fs = require('fs');
const path = require('path');

const basePath = '../../../static/assets/'; // Set the base path

// Function to recursively traverse the directory and create a list of file paths
function createFileList(directory) {
    const fileList = [];

    // Get list of files and directories in the current directory
    const files = fs.readdirSync(directory);

    // Iterate through each file/directory
    files.forEach(file => {
        const filePath = path.join(directory, file);
        const stats = fs.statSync(filePath);

        // If it's a directory, recursively call createFileList
        if (stats.isDirectory()) {
            fileList.push(...createFileList(filePath));
        } else {
            // If it's a file, add it to the fileList
            fileList.push(filePath.replace(basePath, ''));
        }
    });

    return fileList;
}

// Function to get top-level folder names
function getTopLevelFolders(directory) {
    const folders = [];

    // Get list of files and directories in the given directory
    const items = fs.readdirSync(directory);

    // Iterate through each item and identify folders
    items.forEach(item => {
        const itemPath = path.join(directory, item);
        const stats = fs.statSync(itemPath);

        if (stats.isDirectory()) {
            folders.push(item);
        }
    });

    return folders;
}

// Main function to analyze directory and create lists
function analyzeDirectory(directory) {
    const topLevelFolders = getTopLevelFolders(directory);
    const fileObject = {};

    // Create an object of flat lists for each top-level folder
    topLevelFolders.forEach(folder => {
        const folderPath = path.join(directory, folder);
        fileObject[folder] = createFileList(folderPath);
    });

    return fileObject;
}

// Export constants
const assetMap = analyzeDirectory('../../../static/assets'); // Change this to your directory path
const topLevelFolders = Object.keys(assetMap);

// Write to file
const output =
    `// Generated by ./generate.cjs, changes will be overridden
export const assetMap = ${JSON.stringify(assetMap)};
export const topLevelFolders = ${JSON.stringify(topLevelFolders)};
`;

fs.writeFileSync('./asset-map.ts', output);
console.log('Asset map has been written to asset-map.ts');

